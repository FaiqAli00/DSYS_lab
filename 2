**Program 2: Implement a Mini DNS Protocol using RPC**

**Server Code:**
```java
import java.util.*;
import java.net.*;
import java.io.*;

class dnsserver {
    ServerSocket server;
    Socket connection;
    DataInputStream input;
    DataOutputStream output;
    Properties clients;

    dnsserver() {
        try {
            clients = new Properties();
            FileInputStream fin = new FileInputStream("Namelist.dat");
            if (fin != null) {
                clients.load(fin);
                fin.close();
            }

            server = new ServerSocket(1500);
            connection = server.accept();
            output = new DataOutputStream(connection.getOutputStream());
            input = new DataInputStream(connection.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void runserver() {
        while (true) {
            try {
                String command = input.readUTF();
                switch (command) {
                    case "lookup":
                        String host = input.readUTF();
                        String ip = lookup(host);
                        if (ip == null)
                            output.writeUTF("Host name not found");
                        else
                            output.writeUTF("IP address of " + host + " is " + ip);
                        break;

                    case "add":
                        String hostname = input.readUTF();
                        String address = input.readUTF();
                        boolean added = addHost(hostname, address);
                        output.writeUTF(added ? "Host name registered" : "IP address already exists");
                        break;

                    case "remove":
                        String hostToRemove = input.readUTF();
                        boolean removed = removeHost(hostToRemove);
                        output.writeUTF(removed ? "Hostname removed" : "Invalid hostname");
                        break;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    boolean addHost(String name, String ip) {
        if (clients.get(name) != null) return false;
        clients.put(name, ip);
        try {
            FileOutputStream fout = new FileOutputStream("Namelist.dat");
            clients.store(fout, "Namespace");
            fout.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return true;
    }

    boolean removeHost(String name) {
        if (clients.get(name) == null) return false;
        clients.remove(name);
        try {
            FileOutputStream fout = new FileOutputStream("Namelist.dat");
            clients.store(fout, "Namespace");
            fout.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return true;
    }

    String lookup(String host) {
        return (String) clients.get(host);
    }

    public static void main(String args[]) {
        dnsserver ds = new dnsserver();
        ds.runserver();
    }
}
```

**Client Code:**
```java
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

public class dnsclient extends Frame implements ActionListener {
    Button b1, b2, b3, b4;
    Panel p1, p2, p3;
    Label l1, l2;
    TextField t1, t2, t3;
    Socket s1;
    DataOutputStream output;
    DataInputStream input;

    dnsclient() {
        super("DNS Client");
        b1 = new Button("Add");
        b2 = new Button("Lookup");
        b3 = new Button("Remove");
        b4 = new Button("Exit");

        p1 = new Panel();
        p2 = new Panel();
        p3 = new Panel();

        l1 = new Label("Host name:");
        l2 = new Label("IP address:");

        t1 = new TextField(" ", 25);
        t2 = new TextField(" ", 25);
        t3 = new TextField(" ", 25);

        p1.add(l1);
        p1.add(t1);
        p1.add(l2);
        p1.add(t2);

        p2.add(b1);
        p2.add(b2);
        p2.add(b3);
        p2.add(b4);

        p3.add(t3);

        b1.addActionListener(this);
        b2.addActionListener(this);
        b3.addActionListener(this);
        b4.addActionListener(this);

        add("South", p1);
        add("Center", p3);
        add("North", p2);

        setVisible(true);
        setSize(300, 300);

        try {
            s1 = new Socket(InetAddress.getLocalHost(), 1500);
            output = new DataOutputStream(s1.getOutputStream());
            input = new DataInputStream(s1.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void actionPerformed(ActionEvent ae) {
        try {
            if (ae.getSource() == b1) {
                output.writeUTF("add");
                output.writeUTF(t1.getText());
                output.writeUTF(t2.getText());
                t3.setText(input.readUTF());
            } else if (ae.getSource() == b2) {
                output.writeUTF("lookup");
                output.writeUTF(t1.getText());
                t3.setText(input.readUTF());
            } else if (ae.getSource() == b3) {
                output.writeUTF("remove");
                output.writeUTF(t1.getText());
                t3.setText(input.readUTF());
            } else if (ae.getSource() == b4) {
                System.exit(1);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String args[]) {
        new dnsclient();
    }
}
```

**Execution Steps:**
1. Write server and client programs in separate files.
2. Create an empty `Namelist.dat` file.
3. Run the server first, then the client to perform operations like lookup, add, or remove.

